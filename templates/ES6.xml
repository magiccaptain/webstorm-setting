<templateSet group="ES6">
  <template name="export_func" value="export function $NAME$(){&#10;}" description="导出函数" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="action" value="export const $ACTION_NAME$ = '$VALUE$';&#10;export function $FUNC_NAME$($END$){&#10;    return{&#10;        type: $ACTION_NAME$,&#10;    }&#10;}" description="reduex action" toReformat="false" toShortenFQNames="true">
    <variable name="ACTION_NAME" expression="camelCase(String)" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE" expression="lowercaseAndDash(ACTION_NAME)" defaultValue="" alwaysStopAt="true" />
    <variable name="FUNC_NAME" expression="camelCase(ACTION_NAME)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="R_component" value="import React, {PureComponent} from 'react';&#10;import PropTypes from 'prop-types';&#10;&#10;class $NAME$ extends PureComponent {&#10;    constructor(props) {&#10;        super(props);&#10;        this.state = {};&#10;    }&#10;    &#10;&#10;    componentDidMount() {&#10;        //初次渲染完成&#10;    }&#10;&#10;    render() {&#10;        return (&#10;           &lt;div&gt;&lt;/div&gt; &#10;        );&#10;    }&#10;}&#10;&#10;$NAME$.propTypes = {&#10;    $END$&#10;}" description="react 组件" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="const_s" value="const $NAME$ = &quot;$VALUE$&quot;;" description="字符串常量" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE" expression="lowercaseAndDash(NAME)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="const_s_ex" value="export const $NAME$ = &quot;$VALUE$&quot;;" description="export 字符串常量" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE" expression="lowercaseAndDash(NAME)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="returnAsyncPromise" value="return new Promise(async(resolve, reject)=&gt; {&#10;    try {&#10;        $END$&#10;    } catch (err) {&#10;        reject(err);       &#10;    }&#10;});" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="cLog" value="console.log($END$);" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="itTestAsync" value="it('$NAME$', async()=&gt;{&#10;    $END$&#10;});" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="export_async_func" value="export async function $NAME$(){&#10;    $END$&#10;}" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="new_promise" value="new Promise((resolve, reject)=&gt; {&#10;    try {&#10;        $END$&#10;    } catch (err) {&#10;        reject(err);       &#10;    }&#10;});" description="新建Promise对象" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>
